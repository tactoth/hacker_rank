import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        ArrayList<List<Integer>> result = new ArrayList<>();

        int lastMinElement = -1; //
        for (int i = 0; i <= nums.length - 3; i++) {
            int min = nums[i];

            if (i != 0 && min == lastMinElement)
                continue;

            lastMinElement = min;

            // find it from both side
            int j = i + 1, k = nums.length - 1;
            while (j < k) {
                int mid = nums[j];
                int max = nums[k];
                int sum = min + mid + max;
                if (sum == 0) {
                    result.add(Arrays.asList(min, mid, max));
                    while (nums[j] == mid && j < k) j++;
                    while (nums[k] == max && k > j) k--;
                } else if (sum > 0) {
                    k--;
                } else /*if (sum < 0)*/ {
                    j++;
                }
            }

        }

        return result;
    }

    public static void main(String[] args) {
        List<List<Integer>> result = new Solution().threeSum(new int[]{7, -1, 14, -12, -8, 7, 2, -15, 8, 8, -8, -14, -4, -5, 7, 9, 11, -4, -15, -6, 1, -14, 4, 3, 10, -5, 2, 1, 6, 11, 2, -2, -5, -7, -6, 2, -15, 11, -6, 8, -4, 2, 1, -1, 4, -6, -15, 1, 5, -15, 10, 14, 9, -8, -6, 4, -6, 11, 12, -15, 7, -1, -9, 9, -1, 0, -4, -1, -12, -2, 14, -9, 7, 0, -3, -4, 1, -2, 12, 14, -10, 0, 5, 14, -1, 14, 3, 8, 10, -8, 8, -5, -2, 6, -11, 12, 13, -7, -12, 8, 6, -13, 14, -2, -5, -11, 1, 3, -6});
        System.out.println(result);
    }
}