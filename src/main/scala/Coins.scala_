object Solution {

  def main(args: Array[String]) {
    val sc = new java.util.Scanner(System.in);
    var n = sc.nextInt();
    var m = sc.nextInt();
    var coins = new Array[Int](m);
    for (coins_i <- 0 until m) {
      coins(coins_i) = sc.nextInt();
    }


    val cache = Array.fill[Long](n + 1, m)(-1)
    def c(v: Int, coinEndInclusive: Int): Long = {
      if (cache(v)(coinEndInclusive) == -1) {
        cache(v)(coinEndInclusive) = {
          val cv = coins(coinEndInclusive)

          if (coinEndInclusive == 0) {
            if (v % cv == 0) 1 else 0
          } else {
            var result = 0L
            for (i <- 0 to v / cv) {
              val vOfEndCoin = i * cv
              result += c(v - vOfEndCoin, coinEndInclusive - 1)
            }
            result
          }
        }
      }
      cache(v)(coinEndInclusive)
    }

    println(c(n, m - 1))
  }
}
